var detector = require('./detector'),
    fs = require('fs'),
    path = require('path'),
    exec = require('child_process').exec,
    EventEmitter = require('events').EventEmitter,
    Mustache = require('mustache'),
    tmp = require('temporary'),
    moment = require('moment');

// head message
function headMessage(){
  var now = moment().format('YYYY-MM-DD HH:mm:ss');
  return "// generated by fakestk @"+now+"\n\n"
};

// generate random token
function randomToken(){
  var token = require('crypto').randomBytes(8);
  return token.toString('hex');
};

// create applescript as temporary file
function createAppleScript(code){
  var scpt = new tmp.File();
  scpt.writeFileSync(code);
  return scpt
};

// cleanup
function cleanup(jsx_path,log_file,scpt){
  if(fs.existsSync(jsx_path)){
    fs.unlinkSync(jsx_path);
  }
  if(fs.existsSync(log_file)){
    log_file.unlink();
  }
  if(fs.existsSync(scpt)){
    scpt.unlink();
  }
};

function appleScriptProtectedString(str)
{
  str = typeof str === 'string' ? str : str.toString();
  return '"'+str.replace(/"/gi,'\\"')+'"';
}

function argumentsToAppleScriptArguments(args)
{
 let ret = args.map((val) => {
   return typeof val === 'object' ?
    appleScriptProtectedString(JSON.stringify(val)) : appleScriptProtectedString(val);
 });

 return '{'+ ret.join(',') +'}' ;
}

// execute script (osx only)
module.exports = function(code,target,args,done){
  if (typeof args === 'function') done = args, args = undefined;
  if (Array.isArray(target)) args = target, target = undefined;
  if (typeof target === 'function') done = target, target = undefined;
  var code = (typeof 'string' === code)? code : code.toString();
  var base = process.cwd();

  if(fs.existsSync(code)){
    base = path.dirname(path.resolve(code));
    code = fs.readFileSync(code)+'';
  }

  var info = null;
  if( typeof target === 'string' ) {
    info = detector("@target " + target);
  }
  if( info === null ) {
    info = detector(code);
  }

  if(info===null && done!==undefined) return done(new Error('Application Unknown'));
  if(info===null){
    console.log('Applications Unknown');
    process.exit(1);
  }

  var name = info.name,
      ver = info.version,
      cs_version = info.cs_version;
  var cs_name, run_script, scpt_tpl;

  if(code==='') return null;

  var jsx_path = path.join(base,"."+randomToken()+".jsx");
  fs.writeFileSync(jsx_path,headMessage()+code);

  // tell application
  if(ver==='Open'){
    scpt_tpl = fs.readFileSync(__dirname+'/../resources/tpl_id.scpt').toString();
    switch( name ) {
      case 'Illustrator':
        cs_name = 'com.adobe.illustrator';
        break;
      case 'Photoshop':
        cs_name = 'com.adobe.Photoshop';
        break;
      case 'InDesign':
        cs_name = 'com.adobe.indesign';
        break;
      default:
        break;
    };
  } else {
    scpt_tpl = fs.readFileSync(__dirname+'/../resources/tpl.scpt').toString();
    if(name==='Illustrator'){
      cs_name = "/Applications/Adobe Illustrator "+cs_version+"/Adobe Illustrator.app";
    }else{
      cs_name = ['Adobe',name,cs_version].join(' ');
    };
  };

  // temporary log file (overwrite $.write, $.writeln)
  var log_file = new tmp.File();
  var _pre_tpl = [
    "var __log = new File('{{{ logfile }}}');",
    "__log.encoding='UTF8';",
    "__log.lineFeed='Windows';",
    "__log.open('e');",
    "$.write=function(){__log.seek(0,2);__log.write(arguments[0])};",
    "$.writeln=function(){__log.seek(0,2);__log.writeln(arguments[0])};"
  ].join('');
  var _pre = Mustache.render(_pre_tpl, {logfile: log_file.path});
  var _post = '__log.close();';

  // run_script
  if(name==='Photoshop' || name==='Illustrator'){
    run_script = "do javascript \""+_pre+" $.evalFile('"+jsx_path+"'); "+_post+"\"";
  }else{
    run_script = "do script \""+_pre+" $.evalFile('"+jsx_path+"'); "+_post+"\" language javascript";
  }
  if(args)
  {
    run_script = 'set args to '+argumentsToAppleScriptArguments(args)+'\n'+run_script+' with arguments args';
  }

  // templating

  var scpt_code = Mustache.render(scpt_tpl,{app_name: cs_name, run_script: run_script});
  var scpt = createAppleScript(scpt_code);

  // execute osascript
  var cmd = ['osascript',scpt.path].join(' ');

  if(done){
    exec(cmd,function(err,stdout,stderr){

      if(err){
        cleanup(jsx_path,log_file,scpt);
        return done(err);
      }

      if(stderr){
        cleanup(jsx_path,log_file,scpt);
        return done(stderr);
      }

      var ret = log_file.readFileSync();
      done(null, ret.toString());

    }).on('close',function(){
      cleanup(jsx_path,log_file,scpt);
    });
  }
  else{
    var ev = new EventEmitter;
    exec(cmd,function(err,stdout,stderr){

      if(err){
        cleanup(jsx_path,log_file,scpt);
        return ev.emit('error',err);
      }

      if(stderr){
        cleanup(jsx_path,log_file,scpt);
        return ev.emit('error',stderr);
      }

      var ret = log_file.readFileSync();

      ev.emit('data',ret.toString());
    }).on('close',function(){
      cleanup(jsx_path,log_file,scpt);
    });
    return ev
  }

}
